name: Deploy to Bunny CDN

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Deploy to Bunny CDN
      env:
        BUNNY_STORAGE_ZONE_NAME: ${{ secrets.STORAGE_ZONE_NAME }}
        BUNNY_STORAGE_API_KEY: ${{ secrets.STORAGE_API_KEY }}
        BUNNY_STORAGE_REGION: ${{ secrets.STORAGE_REGION }}
        BUNNY_PULL_ZONE_ID: ${{ secrets.PULL_ZONE_ID }}
        BUNNY_ACCOUNT_API_KEY: ${{ secrets.ACCOUNT_API_KEY }}
      run: |
        # Create the deploy script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        # Configuration from environment
        STORAGE_ZONE_NAME="$BUNNY_STORAGE_ZONE_NAME"
        STORAGE_API_KEY="$BUNNY_STORAGE_API_KEY"
        STORAGE_REGION="$BUNNY_STORAGE_REGION"
        PULL_ZONE_ID="$BUNNY_PULL_ZONE_ID"
        ACCOUNT_API_KEY="$BUNNY_ACCOUNT_API_KEY"

        # Base URLs
        get_storage_url() {
            case "$STORAGE_REGION" in
                "ny"|"")
                    echo "https://storage.bunnycdn.com"
                    ;;
                *)
                    echo "https://$STORAGE_REGION.storage.bunnycdn.com"
                    ;;
            esac
        }

        STORAGE_URL=$(get_storage_url)
        API_URL="https://api.bunny.net"
        
        echo "Deploying to Bunny CDN..."
        echo "Storage Zone: $STORAGE_ZONE_NAME"
        echo "Region: $STORAGE_REGION"
        echo "Storage URL: $STORAGE_URL"
        
        # Counter for uploaded files
        UPLOADED=0
        FAILED=0
        
        # Function to upload file
        upload_file() {
            local file="$1"
            local remote_path="$2"
            
            echo "Uploading: $remote_path"
            
            if curl -X PUT \
                -H "AccessKey: $STORAGE_API_KEY" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$file" \
                --fail \
                --silent \
                --show-error \
                "$STORAGE_URL/$STORAGE_ZONE_NAME/$remote_path"; then
                echo "  [OK] $remote_path"
                ((UPLOADED++))
            else
                echo "  [FAILED] $remote_path"
                ((FAILED++))
            fi
        }

        # Check if dist directory exists
        if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
        fi

        # Count total files
        TOTAL_FILES=$(find dist -type f | wc -l)
        echo "Found $TOTAL_FILES files to upload"
        echo ""

        # Upload all files from dist directory
        cd dist
        find . -type f | while read -r file; do
            # Remove leading ./ from path
            remote_path="${file#./}"
            upload_file "$file" "$remote_path"
        done
        
        echo ""
        echo "Upload complete: $UPLOADED succeeded, $FAILED failed"
        
        # Exit if any uploads failed
        if [ $FAILED -gt 0 ]; then
            echo "Error: Some uploads failed"
            exit 1
        fi
        
        # Purge cache
        echo ""
        echo "Purging CDN cache..."
        
        if curl -X POST \
            -H "AccessKey: $ACCOUNT_API_KEY" \
            --fail \
            --silent \
            --show-error \
            -w "HTTP Status: %{http_code}\n" \
            "$API_URL/pullzone/$PULL_ZONE_ID/purgeCache"; then
            echo "Cache purge successful"
        else
            echo "Warning: Cache purge failed"
            # Don't fail the deployment if cache purge fails
        fi
        
        echo ""
        echo "Deployment complete!"
        EOF
        
        chmod +x deploy.sh
        ./deploy.sh

    - name: Deployment Summary
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "Deployment Status: SUCCESS"
          echo "All files have been uploaded to Bunny CDN"
        else
          echo "Deployment Status: FAILED"
          echo "Check the logs above for error details"
          exit 1
        fi
